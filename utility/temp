<?php
namespace src\utility;

use \src\model;
use \src\controller\core;
use \src\controller\interfaces ;
use \src\utility ;
use \src\controller\helpers;

class indexPageUtility extends utility\mainUtility implements interfaces\utilityInterface{ 
    
    private $model;
    private $categoryName;
    private $nextCount;
    
    
    
    function __construct($input){
        parent::__construct();
        $this->helper = new helpers\helpers();
        //echo helpers\helpers::time_elapsed_string("2019-10-02 18:00:00")  ;
       $this->model = new model\postModel();
       $input =  isset($_POST['url']) ? $_POST['url'] : false ;
       $this->nextCount = isset($_POST['grab']) ? (int)$_POST['grab'] : 0 ;
     // print_r($input);

       if($input[0] == "new" || $input[0] =="popular"){
        if($input[1] == "cat"){
            $this->searchInput  = isset($input[4]) ? $input[4] : false;
            $this->sort         = isset($input[0]) ? $input[0] : false;
            $this->categoryName = empty($input[2]) ? "" : $input[2] ;
        }else{
            $this->sort         = isset($input[0]) ? $input[0] : false;
            $this->searchInput  = isset($input[2]) ? $input[2] : false;
        }
    }else{
        if($input[0] == "cat" ){
            $this->searchInput  = isset($input[3]) ? $input[3] : false;
            $this->categoryName = empty($input[1]) ? "" : $input[1] ;
        }else{
            $this->searchInput  = isset($input[1]) ? $input[1] : false;
        }
        
        $this->sort         = "popular";

    }
        
    }

    

    function runScript(){
        $this->output =  $this->getContent();
        $this->view->renderUtilJSON($this->generatePosts()); 


    }

    function getContent(){
        
        if($this->categoryName != ""){
             $this->view->pageData['metaData']['title']      =  $this->categoryName;
             if($this->sort == "new"){
                 return $this->model->getNewPostsCategory($this->categoryName, $this->nextCount,$this->loggedIn,$this->username,$this->searchInput);
 
             }
             return $this->model->getPopularPostsCategory($this->categoryName, $this->nextCount,$this->loggedIn,$this->username,$this->searchInput);
         }else{
             if($this->sort == "new"){
                // echo "ddd";
                 return $this->model->getNewPosts($this->nextCount,$this->loggedIn,$this->username,$this->searchInput);
          
             }
            // echo $this->sort."ssssssssssssss";
             return $this->model->getPopularPosts($this->nextCount,$this->loggedIn,$this->username,$this->searchInput);
          
         }
         
     
     }

      function generatePosts(){
        ob_start();
            require "view/index/posts.php";
        $html = ob_get_clean();
        $flag = (sizeof($this->output) < 10  ) ? true : false ; 
        return array("flag" => $flag, "content" => $html); 

    }

    


  



    

    
}



?>


    function vote(){
        if(!$this->username){
            return false;
        }

        if(is_int($this->ID)  && $this->username && $this->action === "likes" || $this->action === "dislikes" && $this->type === "comment" || $this->type === "post"){
           
                if($this->type ==  "comment"){
                    if($this->update == "true"){


                    if(!$this->model->voteExistsComment($this->username,$this->ID,$this->action)){
                        $this->model->voteComment($this->ID, $this->username, $this->action);
                        //echo $this->ID. " ". $this->username . " ". $this->action;
                        return true;
                    }else {
                        return false;
                    }
                }elseif($this->update == "false"){
                    if($this->model->voteExistsComment($this->username,$this->ID,$this->action)){
                     
                        $this->model->unvoteComment($this->ID, $this->username, $this->action);
                        //echo $this->ID. " ". $this->username . " ". $this->action;
                        return true;
                    }else {
                        return false;
                    }
                }


                }else if($this->type == "post"){
                    
                    if($this->update == "true"){
                        
                        if(!$this->model->voteExistsPost($this->username,$this->ID,$this->action)){
                            $this->model->votePost($this->ID, $this->username, $this->action);
                            return true;
                        }else{
        
                                return false;
                            }

                    }elseif($this->update == "false"){
                       
                        if($this->model->voteExistsPost($this->username,$this->ID,$this->action)){
                            
                            $this->model->unvotePost($this->ID, $this->username, $this->action);
                            
                            return true;
                        }else{
        
                                return false;
                            }

                    }else{
                        return false;
                    }
                        
                }else{
                    return false;
                }

               
           
        }else{
            return false;
        }
       

    }
function success($bool){
        if($bool){
            $this->view->renderUtilJSON(array("message" => true));

        }else{
            $this->view->renderUtilJSON(array("message" => false));

        }

    }